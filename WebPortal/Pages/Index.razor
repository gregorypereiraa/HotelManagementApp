@page "/"
@using WebPortal.EndPoints
@using WebPortal.Models
@using DataLibrary.Dtos.RoomType
@inject IRoomTypeEndPoints RoomTypeEndPoints;
@inject IRoomEndPoints RoomEndPoints;
@inject NavigationManager _Navigation;

<PageTitle>Hotel Management</PageTitle>

<div class="flex justify-center my-4">
    <div class="bg-white p-12 rounded">
        <div class="text-center">
            <h2 class="text-lg font-semibold text-indigo-600">Greg's app</h2>
            <p class="mt-1 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl lg:text-6xl">Welcome to our lovely hotel</p>
            <p class="mx-auto mt-5 max-w-xl text-xl text-gray-500">Start booking your next trip with us</p>
        </div>
    </div>
</div>

<EditForm Model="@_selection" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="flex items-center justify-center">
        <div class="relative">
            <div class="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
                <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <InputDate TValue="DateTime" Value="@_selection.CheckIn" ValueChanged="@(OnCheckinChanged)" ValueExpression="@(() => _selection.CheckIn)" min="@DateTime.Now.ToString("yyyy-MM-dd")" name="start" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Select date start"></InputDate>
        </div>
        <span class="mx-4 text-gray-500">to</span>
        <div class="relative">
            <div class="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none">
                <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <InputDate TValue="DateTime" Value="@_selection.CheckOut" ValueChanged="@(OnCheckoutChanged)" ValueExpression="@(() => _selection.CheckOut)" min="@(_selection.CheckIn.AddDays(1).ToString("yyyy-MM-dd"))" max="@(DateTime.Now.AddYears(1).ToString("yyyy-MM-dd"))"name="end" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Select date end"></InputDate>
        </div>
    </div>

    <div class="flex justify-center mt-3">
        <InputSelect @bind-Value="_selection.RoomTypeId" id="RoomType" name="RoomType" class="w-64  mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm">
            <option value="0"selected>Room Type</option>

            @foreach (var rt in _roomTypeAvailable.OrderBy(i => i.Item1.Price))
            {
                <option disabled="@(rt.Item2 == 0)" value="@rt.Item1.Id">@($"{rt.Item1.Title} - {rt.Item1.Price}$ - {rt.Item2} available ")</option>
            }
        </InputSelect>
    </div>

    @if (_selection.RoomTypeId != default)
    {
        var roomType = _roomTypes.First(x => x.Id == _selection.RoomTypeId);
        GetRoomId();

        <div class="flex justify-center">
            <div>
                <dt class="text-sm font-medium text-gray-500">About</dt>
                <dd class="mt-1 max-w-prose space-y-5 text-sm text-gray-900">
                    <p>@roomType.Description</p>
                </dd>
            </div>
        </div>
    }

    <div class="flex justify-center mt-3">
        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Select</button>
    </div>
</EditForm>

@code
{
    private readonly BookingSelectionModel _selection = new();
    private IEnumerable<RoomTypeDto> _roomTypes = Enumerable.Empty<RoomTypeDto>();
    private List<(RoomTypeDto,int)> _roomTypeAvailable = new();
    private int _roomId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var rt = await RoomTypeEndPoints.GetRoomTypesAsync();
        _roomTypes = rt.ToList();
        await UpdateRoomTypes();
    }

    private void HandleValidSubmit(EditContext obj)
    {
        Console.WriteLine(obj);
        _Navigation.NavigateTo($"/Booking/{_roomId}/{_selection.RoomTypeId}/{_selection.CheckIn:yyyy-MM-ddTHH:mm:ssZ}/{_selection.CheckOut:yyyy-MM-ddTHH:mm:ssZ}");
    }

    private void HandleInValidSubmit(EditContext obj)
    {
        Console.WriteLine(obj);
    }

    private async Task OnCheckinChanged(DateTime arg)
    {
        _selection.CheckIn = arg;
        if (arg > _selection.CheckOut)
        {
            _selection.CheckOut = arg.AddDays(1);
        }

        if (ShouldUpdateRoomTypes())
        {
            await UpdateRoomTypes();
        }

        GetRoomId();
    }

    private async Task OnCheckoutChanged(DateTime arg)
    {
        _selection.CheckOut = arg;

        if (ShouldUpdateRoomTypes())
        {
            await UpdateRoomTypes();
        }

        GetRoomId();
    }

    private async Task UpdateRoomTypes()
    {
        var rooms = await RoomEndPoints.GetRoomAvailableAsync(_selection.CheckIn, _selection.CheckOut);
        var r = rooms.ToList();
        _roomTypeAvailable = new List<(RoomTypeDto, int)>();

        foreach (var rt in _roomTypes)
        {
            var quantity = r.Count(x => x.RoomTypeId == rt.Id);
            _roomTypeAvailable.Add(new ValueTuple<RoomTypeDto, int>(rt, quantity));
        }
    }

    private bool ShouldUpdateRoomTypes()
    {
        return true;
    }

    protected async Task GetRoomId()
    {
        var rooms = await RoomEndPoints.GetRoomAvailableAsync(_selection.CheckIn, _selection.CheckOut);
        rooms.ToList();
        foreach (var room in rooms)
        {
            if (room.RoomTypeId == _selection.RoomTypeId)
            {
                _roomId = room.Id;
            }
        }
    }
}